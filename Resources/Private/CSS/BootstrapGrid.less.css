
// Clearfix
(~".@{prefix}clearfix") {
	*zoom: 1;
	&:before,
	&:after {
		display: table;
		content: "";
		// Fixes Opera/contenteditable bug:
		// http://nicolasgallagher.com/micro-clearfix-hack/#comment-36952
		line-height: 0;
	}
	&:after {
		clear: both;
	}
}

// Box sizing
.box-sizing(@boxmodel) {
	-webkit-box-sizing: @boxmodel;
	-moz-box-sizing: @boxmodel;
	box-sizing: @boxmodel;
}

// Block level inputs
.input-block-level {
	display: block;
	width: 100%;
	.box-sizing(border-box); // Makes inputs behave like true block-level elements
}

// Visibility utilities

// For desktops
(~".@{prefix}visible-phone") { display: none !important; }
(~".@{prefix}visible-tablet") { display: none !important; }
(~".@{prefix}hidden-phone") { }
(~".@{prefix}hidden-tablet") { }
(~".@{prefix}hidden-desktop") { display: none !important; }
(~".@{prefix}visible-desktop") { display: inherit !important; }

// Tablets & small desktops only
@media (min-width: 768px) and (max-width: 979px) {
	// Hide everything else
	(~".@{prefix}hidden-desktop") { display: inherit !important; }
	(~".@{prefix}visible-desktop") { display: none !important ; }
	// Show
	(~".@{prefix}visible-tablet") { display: inherit !important; }
	// Hide
	(~".@{prefix}hidden-tablet") { display: none !important; }
}

// Phones only
@media (max-width: 767px) {
	// Hide everything else
	(~".@{prefix}hidden-desktop") { display: inherit !important; }
	(~".@{prefix}visible-desktop") { display: none !important; }
	// Show
	(~".@{prefix}visible-phone") { display: inherit !important; } // Use inherit to restore previous behavior
	// Hide
	(~".@{prefix}hidden-phone") { display: none !important; }
}

// Centered container element
(~".@{prefix}container-fixed") {
  margin-right: auto;
  margin-left: auto;
  #tx-adxbackendlayout > .clearfix();
}

#tx-adxbackendlayout {

	// Clearfix
	.clearfix() {
		*zoom: 1;
		&:before,
		&:after {
			display: table;
			content: "";
			// Fixes Opera/contenteditable bug:
			// http://nicolasgallagher.com/micro-clearfix-hack/#comment-36952
			line-height: 0;
		}
		&:after {
			clear: both;
		}
	}

	.grid (@gridColumnWidth, @gridGutterWidth) {

		.spanX (@index, @gridColumnWidth, @gridGutterWidth) when (@index > 0) {
			(~".@{prefix}span@{index}") { .span(@index, @gridColumnWidth, @gridGutterWidth); }
			.spanX(@index - 1, @gridColumnWidth, @gridGutterWidth);
		}
		.spanX (0, @gridColumnWidth, @gridGutterWidth) {}

		.span (@columns, @gridColumnWidth, @gridGutterWidth) {
			width: (@gridColumnWidth * @columns) + (@gridGutterWidth * (@columns - 1));
		}

		.offsetX (@index, @gridColumnWidth, @gridGutterWidth) when (@index > 0) {
			(~".@{prefix}offset@{index}") { .offset(@index, @gridColumnWidth, @gridGutterWidth); }
			.offsetX(@index - 1, @gridColumnWidth, @gridGutterWidth);
		}
		.offsetX (0, @gridColumnWidth, @gridGutterWidth) {}

		.offset (@columns, @gridColumnWidth, @gridGutterWidth) {
			margin-left: (@gridColumnWidth * @columns) + (@gridGutterWidth * (@columns + 1));
		}

		(~".@{prefix}row") {
			margin-left: @gridGutterWidth * -1;
			#tx-adxbackendlayout > .clearfix();
		}

		(~'[class*="@{prefix}span"]') {
			float: left;
			min-height: 1px; // prevent collapsing columns
			margin-left: @gridGutterWidth;
		}

		// Set the container width, and override it for fixed navbars in media queries
		(~".@{prefix}container") {
			.span(@gridColumns, @gridColumnWidth, @gridGutterWidth);
		}

		// generate .spanX and .offsetX
		.spanX (@gridColumns, @gridColumnWidth, @gridGutterWidth);
		.offsetX (@gridColumns, @gridColumnWidth, @gridGutterWidth);
	}

	.fluid (@fluidGridColumnWidth, @fluidGridGutterWidth) {

		.spanX (@index, @fluidGridColumnWidth, @fluidGridGutterWidth) when (@index > 0) {
			(~".@{prefix}span@{index}") { .span(@index, @fluidGridColumnWidth, @fluidGridGutterWidth); }
			.spanX(@index - 1, @fluidGridColumnWidth, @fluidGridGutterWidth);
		}
		.spanX (0, @fluidGridColumnWidth, @fluidGridGutterWidth) {}

		.span (@columns, @fluidGridColumnWidth, @fluidGridGutterWidth) {
			width: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1));
			*width: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) - (.5 / @gridRowWidth * 100 * 1%);
		}

		.offsetX (@index, @fluidGridColumnWidth, @fluidGridGutterWidth) when (@index > 0) {
			(~'.@{prefix}offset@{index}') { .offset(@index, @fluidGridColumnWidth, @fluidGridGutterWidth); }
			(~'.@{prefix}offset@{index}:first-child') { .offsetFirstChild(@index, @fluidGridColumnWidth, @fluidGridGutterWidth); }
			.offsetX(@index - 1, @fluidGridColumnWidth, @fluidGridGutterWidth);
		}
		.offsetX (0, @fluidGridColumnWidth, @fluidGridGutterWidth) {}

		.offset (@columns, @fluidGridColumnWidth, @fluidGridGutterWidth) {
			margin-left: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) + (@fluidGridGutterWidth*2);
			*margin-left: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) - (.5 / @gridRowWidth * 100 * 1%) + (@fluidGridGutterWidth*2) - (.5 / @gridRowWidth * 100 * 1%);
		}

		.offsetFirstChild (@columns, @fluidGridColumnWidth, @fluidGridGutterWidth) {
			margin-left: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) + (@fluidGridGutterWidth);
			*margin-left: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) - (.5 / @gridRowWidth * 100 * 1%) + @fluidGridGutterWidth - (.5 / @gridRowWidth * 100 * 1%);
		}

		(~'.@{prefix}row-fluid') {
			width: 100%;
			#tx-adxbackendlayout > .clearfix();
			(~'[class*="@{prefix}span"]') {
				.input-block-level();
				float: left;
				margin-left: @fluidGridGutterWidth;
				*margin-left: @fluidGridGutterWidth - (.5 / @gridRowWidth * 100 * 1%);
			}
			(~'[class*="@{prefix}span"]:first-child') {
				margin-left: 0;
			}
	
			// generate .spanX and .offsetX
			.spanX (@gridColumns, @fluidGridColumnWidth, @fluidGridGutterWidth);
			.offsetX (@gridColumns, @fluidGridColumnWidth, @fluidGridGutterWidth);
		}
	}
}

// Fixed (940px)
#tx-adxbackendlayout > .grid(@gridColumnWidth, @gridGutterWidth);

// Fluid (940px)
#tx-adxbackendlayout > .fluid(@fluidGridColumnWidth, @fluidGridGutterWidth);

@media (min-width: 1200px) {

	// Fixed grid
	#tx-adxbackendlayout > .grid(@gridColumnWidth1200, @gridGutterWidth1200);

	// Fluid grid
	#tx-adxbackendlayout > .fluid(@fluidGridColumnWidth1200, @fluidGridGutterWidth1200);
}

@media (min-width: 768px) and (max-width: 979px) {

	// Fixed grid
	#tx-adxbackendlayout > .grid(@gridColumnWidth768, @gridGutterWidth768);

	// Fluid grid
	#tx-adxbackendlayout > .fluid(@fluidGridColumnWidth768, @fluidGridGutterWidth768);
}

@media (max-width: 767px) {

	// GRID & CONTAINERS
	// -----------------
	// Remove width from containers
	(~".@{prefix}container") {
		width: auto;
	}

	// Fluid rows
	(~".@{prefix}row-fluid") {
		width: 100%;
	}

	// Undo negative margin on rows and thumbnails
	(~".@{prefix}row") {
		margin-left: 0;
	}

	// Make all grid-sized elements block level again
	(~'[class*="@{prefix}span"]'),
	(~'.@{prefix}row-fluid [class*="@{prefix}span"]') {
		float: none;
		display: block;
		width: 100%;
		margin-left: 0;
		.box-sizing(border-box);
	}

	(~".@{prefix}span12"),
	(~".@{prefix}row-fluid .@{prefix}span12") {
		width: 100%;
		.box-sizing(border-box);
	}

	(~'.@{prefix}row-fluid [class*="@{prefix}offset"]:first-child') {
		margin-left: 0;
	}
}